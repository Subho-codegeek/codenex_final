[{"D:\\Mini Project\\Final CodeNex\\codenex_final\\client\\src\\App.js":"1","D:\\Mini Project\\Final CodeNex\\codenex_final\\client\\src\\EditorApp.js":"2","D:\\Mini Project\\Final CodeNex\\codenex_final\\client\\src\\pages\\SignIn.js":"3","D:\\Mini Project\\Final CodeNex\\codenex_final\\client\\src\\pages\\SignUp.js":"4","D:\\Mini Project\\Final CodeNex\\codenex_final\\client\\src\\pages\\Room.js":"5","D:\\Mini Project\\Final CodeNex\\codenex_final\\client\\src\\index.js":"6","D:\\Mini Project\\Final CodeNex\\codenex_final\\client\\src\\defaultStubs.js":"7"},{"size":965,"mtime":1710367032035,"results":"8","hashOfConfig":"9"},{"size":8948,"mtime":1710364086884,"results":"10","hashOfConfig":"9"},{"size":1470,"mtime":1710367418538,"results":"11","hashOfConfig":"9"},{"size":1560,"mtime":1710367379871,"results":"12","hashOfConfig":"9"},{"size":1948,"mtime":1710367271789,"results":"13","hashOfConfig":"9"},{"size":184,"mtime":1710362771033,"results":"14","hashOfConfig":"9"},{"size":316,"mtime":1710362771032,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"j6862z",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Mini Project\\Final CodeNex\\codenex_final\\client\\src\\App.js",[],[],"D:\\Mini Project\\Final CodeNex\\codenex_final\\client\\src\\EditorApp.js",["39","40","41"],[],"import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Editor from \"@monaco-editor/react\";\r\nimport stubs from \"./defaultStubs\";\r\nimport \"./App.css\";\r\n\r\nconst editorOptions = {\r\n    scrollBeyondLastLine: false,\r\n    fontSize: \"15px\",\r\n    folding: false,\r\n    // lineDecorationsWidth: 15,\r\n};\r\n\r\nconst inputOptions = {\r\n    minimap: { enabled: false },\r\n    automaticLayout: true,\r\n    scrollBeyondLastLine: false,\r\n    fontSize: \"14px\",\r\n    lineDecorationsWidth: 5,\r\n};\r\nconst outputOptions = {\r\n    minimap: { enabled: false },\r\n    automaticLayout: true,\r\n    scrollBeyondLastLine: false,\r\n    fontSize: \"14px\",\r\n    lineDecorationsWidth: 5,\r\n};\r\n\r\nfunction EditorApp() {\r\n    const [language, setLanguage] = useState(\"python\");\r\n    const [code, setCode] = useState(\"\");\r\n    const [input, setInput] = useState(\"// enter input here\");\r\n    const [output, setOutput] = useState(\"\");\r\n    const [status, setStatus] = useState(\"\");\r\n    const [jobId, setJobId] = useState(\"\");\r\n    const [jobDetails, setJobDetails] = useState(null);\r\n    const [editorMode, setEditorMode] = useState(\"vs-dark\");\r\n    const [languageIcon, setLanguageIcon] = useState(\"./resources/python.png\");\r\n\r\n    useEffect(() => {\r\n        setCode(stubs[language]);\r\n        setOutput(\"// output\");\r\n        setLanguageIcon(`./resources/${language}.png`);\r\n    }, [language]);\r\n\r\n    const toggleTheme = (idName) => {\r\n        let currentClassName = document.getElementById(idName).className;\r\n        let newClassName = currentClassName;\r\n        if (currentClassName === idName + \"-dark\")\r\n            newClassName = idName + \"-light\";\r\n        else newClassName = idName + \"-dark\";\r\n        document.getElementById(idName).className = newClassName;\r\n    };\r\n\r\n    const handleThemeChange = () => {\r\n        if (editorMode === \"vs-light\") setEditorMode(\"vs-dark\");\r\n        else setEditorMode(\"vs-light\");\r\n        toggleTheme(\"App\");\r\n        toggleTheme(\"header\");\r\n        toggleTheme(\"app-name\");\r\n        toggleTheme(\"language-button\");\r\n        const themeToggler = document.getElementById(\"theme-icon\");\r\n        let classNames = themeToggler.classList;\r\n        if (classNames.contains(\"theme-icon-light\")) {\r\n            classNames.replace(\"theme-icon-light\", \"theme-icon-dark\");\r\n            classNames.replace(\"fa-sun\", \"fa-moon\");\r\n        } else {\r\n            classNames.replace(\"theme-icon-dark\", \"theme-icon-light\");\r\n            classNames.replace(\"fa-moon\", \"fa-sun\");\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        const payload = {\r\n            language: language,\r\n            code: code,\r\n            input: input,\r\n        };\r\n        try {\r\n            setJobId(\"\");\r\n            setStatus(\"Running\");\r\n            setJobDetails(null);\r\n            setOutput(`Code Execution Status: Running`);\r\n            const { data } = await axios.post(\r\n                \"http://localhost:8000/run\",\r\n                payload\r\n            );\r\n            // console.log(data);\r\n            setJobId(data.jobId);\r\n\r\n            let intervalId;\r\n\r\n            intervalId = setInterval(async () => {\r\n                setStatus(\"Running\");\r\n                setOutput(`Code Execution Status: Running`);\r\n                const { data: dataRes } = await axios.get(\r\n                    \"http://localhost:8000/status\",\r\n                    { params: { id: data.jobId } }\r\n                );\r\n                const { success, job, error } = dataRes;\r\n                if (success) {\r\n                    // console.log(dataRes);\r\n                    setJobDetails(job);\r\n                    // console.log(jobDetails);\r\n                    const { status: jobStatus, output: jobOutput } = job;\r\n                    setStatus(jobStatus);\r\n                    if (jobStatus === \"Running\") {\r\n                        setOutput(`Code Execution Status: Running`);\r\n                        return;\r\n                    } else if (jobStatus === \"Success\") {\r\n                        setOutput(\r\n                            `Code Execution Status: ${jobStatus}\\n\\n${jobOutput}`\r\n                        );\r\n                    } else {\r\n                        const errorObject = JSON.parse(jobOutput);\r\n                        // console.log(errorObject);\r\n                        setOutput(\r\n                            `Code Execution Status: ${jobStatus}\\n\\n${errorObject.stderr}`\r\n                        );\r\n                    }\r\n                    clearInterval(intervalId);\r\n                } else {\r\n                    console.log(dataRes);\r\n                    setStatus(\"Error !!! \");\r\n                    console.error(error);\r\n                    setOutput(error);\r\n                    clearInterval(intervalId);\r\n                }\r\n            }, 1000);\r\n        } catch ({ response }) {\r\n            if (response) {\r\n                const errorMessage = response.data.err.stderr;\r\n                setOutput(errorMessage);\r\n            } else {\r\n                setOutput(\"Error connecting to server!\");\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div id=\"App\" className=\"App-dark\">\r\n            <div id=\"header\" className=\"header-dark\">\r\n                <h3 id=\"app-name\" className=\"app-name-dark\">\r\n                    {/* <i className=\"fas fa-solid fa-cube\" aria-hidden=\"true\"></i> */}\r\n                    CodeNex Editor\r\n                </h3>\r\n\r\n                <div className=\"nav-right-options\">\r\n                    <i\r\n                        id=\"theme-icon\"\r\n                        className=\"fas fa-solid fa-sun fa-2x nav-icons theme-icon-light\"\r\n                        aria-hidden=\"true\"\r\n                        onClick={handleThemeChange}\r\n                    ></i>\r\n\r\n                    {/* <i\r\n                        className=\"fas fa-solid fa-swatchbook tutorial-icon nav-icons fa-2x\"\r\n                        aria-hidden=\"true\"\r\n                    ></i> */}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"secondary-nav-items\">\r\n                <button className=\"btn logo-btn\" disabled={true}>\r\n                    <img\r\n                        src={require(`${languageIcon}`)}\r\n                        className=\"image\"\r\n                        alt={`${language} icon`}\r\n                    />\r\n                </button>\r\n                <button id=\"language-button\" className=\"language-button-dark\">\r\n                    <select\r\n                        value={language}\r\n                        onChange={(e) => {\r\n                            setStatus(\"\");\r\n                            setJobDetails(null);\r\n                            setLanguage(e.target.value);\r\n                            setCode(stubs[e.target.value]);\r\n                            setLanguageIcon(`./resources/${language}.png`);\r\n                        }}\r\n                    >\r\n                        <option value={\"python\"}>Python</option>\r\n                        <option value={\"cpp\"}>C++</option>\r\n                    </select>\r\n                </button>\r\n                {/* run button */}\r\n                <button className=\"btn run-btn\" onClick={handleSubmit}>\r\n                    <i\r\n                        className=\"fas fa-play fa-fade run-icon\"\r\n                        aria-hidden=\"true\"\r\n                    ></i>\r\n                    &nbsp; Run\r\n                </button>\r\n            </div>\r\n\r\n            <div className=\"editor\">\r\n                <Editor\r\n                    height=\"100%\"\r\n                    width=\"100%\"\r\n                    theme={editorMode}\r\n                    defaultLanguage={language}\r\n                    defaultValue={code}\r\n                    value={code}\r\n                    onChange={(e) => setCode(e)}\r\n                    options={editorOptions}\r\n                    language={language}\r\n                />\r\n            </div>\r\n            <div className=\"std-input-output\">\r\n                <div className=\"std-input\">\r\n                    <Editor\r\n                        height=\"100%\"\r\n                        width=\"100%\"\r\n                        theme={editorMode}\r\n                        defaultLanguage=\"plaintext\"\r\n                        defaultValue={\"// enter input here\"}\r\n                        value={input}\r\n                        options={inputOptions}\r\n                        onChange={(e) => setInput(e)}\r\n                    />\r\n                </div>\r\n                <div className=\"std-output\">\r\n                    <Editor\r\n                        height=\"100%\"\r\n                        width=\"100%\"\r\n                        theme={editorMode}\r\n                        defaultLanguage=\"plaintext\"\r\n                        defaultValue={\"// output\"}\r\n                        value={output}\r\n                        options={outputOptions}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <br />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditorApp;\r\n",[],"D:\\Mini Project\\Final CodeNex\\codenex_final\\client\\src\\pages\\SignIn.js",["42","43","44","45","46"],[],"D:\\Mini Project\\Final CodeNex\\codenex_final\\client\\src\\pages\\SignUp.js",["47","48","49","50"],[],"D:\\Mini Project\\Final CodeNex\\codenex_final\\client\\src\\pages\\Room.js",["51"],[],"D:\\Mini Project\\Final CodeNex\\codenex_final\\client\\src\\index.js",[],[],"D:\\Mini Project\\Final CodeNex\\codenex_final\\client\\src\\defaultStubs.js",[],[],{"ruleId":"52","severity":1,"message":"53","line":34,"column":12,"nodeType":"54","messageId":"55","endLine":34,"endColumn":18},{"ruleId":"52","severity":1,"message":"56","line":35,"column":12,"nodeType":"54","messageId":"55","endLine":35,"endColumn":17},{"ruleId":"52","severity":1,"message":"57","line":36,"column":12,"nodeType":"54","messageId":"55","endLine":36,"endColumn":22},{"ruleId":"58","severity":1,"message":"59","line":20,"column":21,"nodeType":"60","endLine":20,"endColumn":54},{"ruleId":"58","severity":1,"message":"59","line":21,"column":21,"nodeType":"60","endLine":21,"endColumn":54},{"ruleId":"58","severity":1,"message":"59","line":22,"column":21,"nodeType":"60","endLine":22,"endColumn":54},{"ruleId":"58","severity":1,"message":"59","line":23,"column":21,"nodeType":"60","endLine":23,"endColumn":54},{"ruleId":"58","severity":1,"message":"59","line":28,"column":17,"nodeType":"60","endLine":28,"endColumn":29},{"ruleId":"58","severity":1,"message":"59","line":21,"column":21,"nodeType":"60","endLine":21,"endColumn":54},{"ruleId":"58","severity":1,"message":"59","line":22,"column":21,"nodeType":"60","endLine":22,"endColumn":54},{"ruleId":"58","severity":1,"message":"59","line":23,"column":21,"nodeType":"60","endLine":23,"endColumn":54},{"ruleId":"58","severity":1,"message":"59","line":24,"column":21,"nodeType":"60","endLine":24,"endColumn":54},{"ruleId":"58","severity":1,"message":"59","line":61,"column":13,"nodeType":"60","endLine":61,"endColumn":74},"no-unused-vars","'status' is assigned a value but never used.","Identifier","unusedVar","'jobId' is assigned a value but never used.","'jobDetails' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement"]